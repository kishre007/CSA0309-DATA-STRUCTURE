#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data, height;
    struct Node *left, *right;
};

int max(int a, int b){ return (a>b)?a:b; }
int h(struct Node* n){ return n? n->height:0; }
int bf(struct Node* n){ return n? h(n->left)-h(n->right):0; }

struct Node* newNode(int key){
    struct Node* n=(struct Node*)malloc(sizeof(struct Node));
    n->data=key; n->left=n->right=NULL; n->height=1;
    return n;
}

// Rotations
struct Node* rightRotate(struct Node* y){
    struct Node* x=y->left; y->left=x->right; x->right=y;
    y->height=1+max(h(y->left),h(y->right));
    x->height=1+max(h(x->left),h(x->right));
    return x;
}
struct Node* leftRotate(struct Node* x){
    struct Node* y=x->right; x->right=y->left; y->left=x;
    x->height=1+max(h(x->left),h(x->right));
    y->height=1+max(h(y->left),h(y->right));
    return y;
}

// Insert
struct Node* insert(struct Node* root,int key){
    if(!root) return newNode(key);
    if(key<root->data) root->left=insert(root->left,key);
    else if(key>root->data) root->right=insert(root->right,key);
    else return root;
    root->height=1+max(h(root->left),h(root->right));
    int b=bf(root);
    if(b>1 && key<root->left->data) return rightRotate(root);
    if(b<-1 && key>root->right->data) return leftRotate(root);
    if(b>1 && key>root->left->data){ root->left=leftRotate(root->left); return rightRotate(root);}
    if(b<-1 && key<root->right->data){ root->right=rightRotate(root->right); return leftRotate(root);}
    return root;
}
struct Node* minNode(struct Node* n){ while(n->left) n=n->left; return n; }
struct Node* delete(struct Node* root,int key){
    if(!root) return root;
    if(key<root->data) root->left=delete(root->left,key);
    else if(key>root->data) root->right=delete(root->right,key);
    else{
        if(!root->left||!root->right){
            struct Node* t=root->left?root->left:root->right;
            if(!t){ t=root; root=NULL; } else *root=*t;
            free(t);
        } else {
            struct Node* t=minNode(root->right);
            root->data=t->data;
            root->right=delete(root->right,t->data);
        }
    }
    if(!root) return root;
    root->height=1+max(h(root->left),h(root->right));
    int b=bf(root);
    if(b>1 && bf(root->left)>=0) return rightRotate(root);
    if(b>1 && bf(root->left)<0){ root->left=leftRotate(root->left); return rightRotate(root);}
    if(b<-1 && bf(root->right)<=0) return leftRotate(root);
    if(b<-1 && bf(root->right)>0){ root->right=rightRotate(root->right); return leftRotate(root);}
    return root;
}
struct Node* search(struct Node* root,int key){
    if(!root || root->data==key) return root;
    if(key<root->data) return search(root->left,key);
    return search(root->right,key);
}
void inorder(struct Node* r){ if(r){ inorder(r->left); printf("%d ",r->data); inorder(r->right);} }
int main(){
    struct Node* root=NULL;
    root=insert(root,10);
    root=insert(root,20);
    root=insert(root,30);
    root=insert(root,25);

    printf("Inorder: "); inorder(root); printf("\n");

    root=delete(root,20);
    printf("After deletion: "); inorder(root); printf("\n");

    int key=25;
    if(search(root,key)) printf("%d found!\n",key);
    else printf("%d not found!\n",key);

    return 0;
}
